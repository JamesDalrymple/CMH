{
    "collab_server" : "",
    "contents" : "# start_date will always be one year prior to end date\nstart_date <- dateConvert(end_date) - 365\n\n## date parameters - for ease of reading ##\nstart_par <- gsub(x = start_date, pattern = \"/\", replace = \"_\")\nend_par <- gsub(x = end_date, pattern = \"/\", replace = \"_\")\nrun_par <- gsub(x = run_date, pattern = \"/\", replace = \"_\")\n#### Load Data ####\n# code table #\nUMcodeDesc <- read.dtable(file.path(\n  baseWD,\n  \"Dropbox/Utilization Management/UM_Desc_MDCH_2012.csv\"))\ncsv_files <- list.files(file.path(baseWD, dataWD),\n                        pattern = \".csv\", full.names = TRUE)\nrds_files <- list.files(file.path(baseWD, dataWD),\n                       pattern = \".rds\", full.names = TRUE)\n### load, save, compress data ###\n# fb data\nfb_claims <- load_data(\n  file_pattern = \"fb contract\",\n  keep_cols = c(\n    \"CASE..\", \"PRI.PROCEDURE.CODE\", \"UNIT.TYPE\", \"FROM.DATE\", \"THRU.DATE\",\n    \"UNITS\", \"ALLOWED.AMOUNT\"),\n  rename_cols = c(\"case_no\", \"cpt\", \"unit_type\", \"from_date\", \"thru_date\",\n    \"units\", \"cost\"),\n  rm.original = TRUE)\nfb_direct <- load_data(\n  file_pattern = \"fb direct\",\n  keep_cols = c(\n    \"CASE..\", \"PRI.PROCEDURE.CODE\", \"UNIT.TYPE\", \"FROM.DATE\", \"THRU.DATE\",\n    \"UNITS\", \"ALLOWED.AMOUNT\"\n  ),\n  rename_cols = c(\n    \"case_no\", \"cpt\", \"unit_type\", \"from_date\", \"thru_date\",\n    \"units\", \"cost\"),\n  rm.original = TRUE)\nfb_data <- rbindlist(list(fb_direct, fb_claims))\n# admit\nadmit <- load_data(\n  file_pattern = \"admit 2181 sheet1\",\n  keep_cols = c(\n    \"Case_no\", \"Team\", \"team_effdt\", \"team_expdt\", \"CMH_effdt\",\n    \"CMH_expdt\", \"Primary_Provide_or_not\"),\n  rename_cols = c(\n    \"case_no\", \"team\", \"team_effdt\", \"team_expdt\",\n    \"cmh_effdt\", \"cmh_expdt\", \"prim_provider\"),\n  rm.original = TRUE)\n# insure - sheet1\ninsure <- load_data(\n  file_pattern = \"CMH Open Ins 2046 sheet1\",\n  keep_cols = c(\n    \"Case.no\", \"Age\", \"Medicaid..HMP..Spend.Down.\", \"Waiver...HSW..CW..SED.\",\n    \"A\", \"B\", \"A...B\", \"D\", \"Primary.INS\", \"Secondary.INS\", \"Other.INS\"),\n  rename_cols = c(\n    \"case_no\", \"age\", \"medicaid\", \"waiver\", \"a\", \"b\", \"a_b\", \"d\",\n    \"primary_ins\", \"secondary_ins\", \"other_ins\"),\n  rm.original = TRUE)\n\n# read.dtable(file.path(baseWD, dataWD, \"CMH Open Ins 2046 sheet1 5_5_2015.csv\"))[1]\n# insurance detail\nins_detail <- load_data(\n  file_pattern = \"CMH Open Ins 2046 sheet2\",\n  keep_cols = c(\"Case.no\", \"Insurance.Name\"),\n  rename_cols = c(\"case_no\", \"insurance_name\"),\n  rm.original = TRUE\n)\n\n# case load\ncase_load <- load_data(\n  file_pattern = \"case load 2002 sheet2\",\n  keep_cols = c(\"Supervisor\", \"Primary.Staff\",\n                \"Primary.Staff.Type\", \"Case.No\"),\n  rename_cols = c(\"supervisor\", \"primary_staff\", \"primary_staff_type\",\n                  \"case_no\"),\n  rm.original = TRUE)\n# court order repetition & PRR\ncourt <- load_data(\n  file_pattern = \"court services 2061 sheet1\",\n  keep_cols = c(\"Case_no\", \"OrderType\", \"CS_order_date\"),\n  rename_cols = c(\"case_no\", \"ordertype\", \"cs_order_date\"),\n  rm.original = TRUE)\n# demo\ndemo <- load_data(\n  file_pattern = \"CMH demo 2105\",\n  keep_cols = c(\"Case_no\", \"PrimaryCarePhysician\", \"PrimaryCareClinic\"),\n  rename_cols = c(\"case_no\", \"primarycarephysician\", \"primarycareclinic\"),\n  rm.original = TRUE)\n# diagnoses ... download as xls file and keep first tab only\ndiagnoses <- load_data(\n  file_pattern = \"diagnoses 2157\",\n  keep_cols = c(\"Case.No\", \"Diag1\", \"Diag1.desc\", \"Diag2\", \"Diag2.desc\"),\n  rename_cols = c(\"case_no\", \"diag1\", \"diag1_desc\", \"diag2\", \"diag2_desc\"),\n  rm.original = TRUE)\n\n# read.dtable(file.path(baseWD, dataWD, \"CMH demo 2105 5_5_2015.csv\"))[1]\n# locus - run in E.1, download as Excel file\nlocus <- load_data(\n  file_pattern = \"locus 2227\",\n  keep_cols = c(\n    \"Case.no\", \"Locus.date\",\n    \"Recommended.Disposition\", \"Overidden.Disposition\", \"CMH.Adm.Date\"),\n  rename_cols = c(\"case_no\", \"locus_date\", \"recommend\", \"override\", \"adm_date\"),\n  rm.original = TRUE)\n#### manipulate data ####\n### demographics data - contains primary care doctor ###\ndemo <- unique(demo)\n\n### court data ###\n# remove dups if exist (probably un-needed)\ncourt <- unique(court)\ncourt[, cs_order_date := dateConvert(cs_order_date)]\nlevels <- court[, rev(unique(ordertype))]\ncourt[, ordertype := factor(ordertype, levels = levels)]\ncourt <- court[order(case_no, ordertype)]\ncourt[, group := .GRP, by = list(case_no)]\ncourt[, index := .N, by = group]\ncourt <- court[!(index > 1 & ordertype == \"Other\")]\ncourt[, index := .N, by = group]\ncourt[, max_order_dt := max(cs_order_date), by = list(case_no)]\ncourt <- court[max_order_dt == cs_order_date]\ncourt[, c(\"group\", \"index\", \"max_order_dt\") := NULL]\ncourt[, ordertype := as.character(ordertype)]\n\n### insure ###\n# make medicare column\ninsure[a == \"\" & b == \"\" & a_b == \"\" & d == \"\", medicare := \"N\"]\ninsure[is.na(medicare), medicare := \"Y\"]\ninsure[, c(\"a\", \"b\", \"a_b\", \"d\") := NULL]\n## remove certain primary and secondary insurance for listed 'insurances' ##\nnot_insurance <-\n  c(\n    \"Assessed for Medicaid Expansion - Eligible\",\n    \"Assessed for Medicaid Expansion - Not Eligible\",\n    \"Autism\", \"Adoption Subsidy\", \"WRAPAROUND - LIVINGSTON\")\nsetkey(insure, primary_ins)[J(not_insurance), primary_ins := \"\"]\nsetkey(insure, secondary_ins)[J(not_insurance), secondary_ins := \"\"]\nsetkey(insure, other_ins)[J(not_insurance), other_ins := \"\"]\n# remove COFR insurance layer\ninsure[grep(x = primary_ins, pattern = \"COFR\"), primary_ins := \"\"]\ninsure[grep(x = secondary_ins, pattern = \"COFR\"), secondary_ins := \"\"]\ninsure[grep(x = other_ins, pattern = \"COFR\"), other_ins := \"\"]\n\n## Medicare HMO ##\n# set medicare=\"Y\" if consumer has HMO Medicare\ninsure[grep(x = primary_ins, pattern = \"medicare\", ignore.case = TRUE),\n       medicare := \"Y\"]\ninsure[grep(x = secondary_ins, pattern = \"medicare\",\n            ignore.case = TRUE), medicare := \"Y\"]\ninvisible(insure[grep(x = other_ins, pattern = \"medicare\",\n                      ignore.case = TRUE), medicare := \"Y\"])\n# remove medicare HMO from private insurance\ninsure[grep(x = primary_ins, pattern = \"medicare\", ignore.case = TRUE),\n       primary_ins := \"\"]\ninsure[grep(x = secondary_ins, pattern = \"medicare\",\n            ignore.case = TRUE), secondary_ins := \"\"]\ninvisible(insure[grep(x = other_ins, pattern = \"medicare\", ignore.case =\n                        TRUE), other_ins := \"\"])\n\n## make primary insurance column ##\ninsure[primary_ins != \"\" |\n         secondary_ins != \"\" | other_ins != \"\", private_insurance := \"Y\"]\ninsure[primary_ins == \"\" &\n         secondary_ins == \"\" & other_ins == \"\", private_insurance := \"N\"]\n# remove duplicates\ninsure <- unique(insure)\n### make fund columns ###\n# add MI Child to Medicaid\nsetkey(insure, medicaid)[J(c(\"Medicaid\", \"MI Child\")), fund := \"Medicaid\"]\n# spend-down\nsetkey(insure, medicaid)[J(c(\"S/D/N\", \"S/D/Y\")), fund := \"spend-down\"]\ninvisible(setkey(insure, NULL))\ninsure[fund == \"spend-down\" &\n         waiver == \"HAB Waiver\", fund := \"HAB spend-down\"]\n\n# per Kelly B on 9/25/2015\ninsure[is.na(fund) & waiver == \"HAB Waiver\", fund := \"Medicaid\"]\n# insure[, table(waiver, medicaid)] #### checking ...\n# HMP\ninsure[medicaid == \"HMP\", fund := \"HMP\"]\n\n# insure[waiver == \"HAB Waiver\" & is.na(fund)]\n# insure[is.na(fund) &\n#          (medicare == \"Y\" | private_insurance == \"Y\")][waiver==\"HAB Waiver\"]\n\n# grouping Medicare and private ins. together\ninsure[is.na(fund) &\n         (medicare == \"Y\" | private_insurance == \"Y\"),\n       fund := \"Medicare/TPP\"]\n# GF consumers because they have no insurance (as far as we know)\ninsure[is.na(fund), fund := \"GF\"]\n#### unique(insure[, c(\"waiver\", \"medicaid\", \"fund\"), with=FALSE]) # all possibilities\n\n# remove medicaid columns\n# insure[, c(\"medicaid\", \"waiver\") := NULL]\n# get rid of case_no NAs\ninsure <- insure[!is.na(case_no)]\n\n### ins_detail ###\nins_detail <- ins_detail[!is.na(case_no)]\nins_detail <- unique(ins_detail)\nnot_insurance2 <-\n  c(\n    \"SDA,SSI,SSDI\", \"Assessed for Medicaid Expansion - Eligible\",\n    \"Assessed for Medicaid Expansion - Not Eligible\",\n    \"Autism\", \"Adoption Subsidy\", \"WRAPAROUND - LIVINGSTON\"\n  )\nins_detail <-\n  setkey(ins_detail, insurance_name)[!J(not_insurance2)]\nins_detail <-\n  ins_detail[!grep(x = insurance_name, pattern = \"COFR\")]\nins_detail <-\n  ins_detail[!grep(x = insurance_name, pattern = \"Medicare\", ignore.case =\n                     TRUE)]\nrm(not_insurance2)\nadd_private_ins <- merge(insure, ins_detail, all.y = TRUE,\n  by = \"case_no\")[!is.na(private_insurance)][private_insurance == \"N\"]\nsetkey(insure, case_no)[J(add_private_ins[,\n  unique(case_no)]), private_insurance := \"Y\"]\nrm(add_private_ins, ins_detail)\n\n### admissions ###\n# convert dates\ndate_cols = c(\"team_effdt\", \"team_expdt\", \"cmh_effdt\", \"cmh_expdt\")\nfor (j in date_cols)\n  set(admit, j = j, value = as.Date(admit[[j]], format = \"%m/%d/%Y\"))\nrm(date_cols, j)\n# keep only the teams in teamCMH\nsetkey(admit, team)\nadmit <- admit[J(teamCMH)]\n# get rid of NA case numbers\nadmit <- admit[!is.na(case_no)]\n# remove duplicates\nadmit <- unique(admit)\n## last team per consumer ##\nadmit[is.na(team_expdt), team_expdt := Sys.Date() + 9999]\nadmit <-\n  merge(admit, admit[, list(team_expdt = max(team_expdt)), by = .(case_no)],\n        all.y = TRUE, by = c(\"case_no\", \"team_expdt\"))\nadmit <- admit[order(case_no, team_expdt)]\nadmit[, team := teamFix(team)]\n\nlast_team <- admit[, list(case_no = unique(case_no)), by = team]\nif (last_team[, length(case_no)] != admit[, length(unique(case_no))]) {\n  stop(\"error in last_team, duplicates found, please fix!\")\n}\n\n# not best approach - mark all cases never marked primary as primary... works for now\ncases_not_prim <- setdiff(admit[prim_provider == \"N\", unique(case_no)],\n                          admit[prim_provider == \"Y\", unique(case_no)])\nadmit[case_no %in% cases_not_prim, prim_provider := \"Y\"]\nrm(cases_not_prim)\n\n# keep most recent team only (closed consumers are kept this way)\nadmit <- admit[prim_provider == \"Y\"]\n\n## find the lowest priority team for each consumer ##\n# keep only the team with the lowest priority\nadmit[, teamPriority := sapply(team, team.priority)]\n# find lowest priority per consumer\nadmit[, minPriority := min(teamPriority), by = list(case_no)]\n\n# keep the lowest priority per consumer (for simplicity)\nadmit <- admit[minPriority == teamPriority]\n# remove priority columns\nadmit[, c(\"teamPriority\", \"minPriority\") := NULL]\n# fix team names\nadmit[, team := sapply(team, teamFix)]\n# max cmh - have open cases override all closed cases\nadmit[, max_cmh_expdt := max(cmh_expdt), by = list(case_no)]\nif (nrow(admit[is.na(cmh_expdt) &\n               !is.na(max_cmh_expdt)]) > 0) {\n  stop(\"duplicate admission errors, fix now\")\n}\nadmit <-\n  admit[cmh_expdt == max_cmh_expdt |\n          (is.na(cmh_expdt) & is.na(max_cmh_expdt))]\n# using only 1 (most recent) team for consumer for simplicity\nadmit[, c(\"team_effdt\", \"team_expdt\", \"prim_provider\", \"max_cmh_expdt\") := NULL]\n# remove duplicates\nadmit <- unique(admit)\n\n### funding bucket ###\n# aggregating data to condense multiple rows that have the same consumer, CPT code, and date into one row\nfb_data <- fb_data[, list(cost = sum(cost, na.rm = TRUE),\n                          units = sum(units, na.rm = TRUE)),\n                   by = list(case_no, cpt, unit_type, from_date)]\n\n## date conversion and date filter ##\nfb_data[, from_date := dateConvert(from_date, format = \"%m/%d/%Y\")]\nfb_data <-\n  fb_data[from_date %between% c(dateConvert(start_date), dateConvert(end_date))]\n## establish fund based on file input ##\nfb_data <- merge(insure[, .SD,\n  .SDcols = c(\"case_no\", \"age\", \"primary_ins\", \"secondary_ins\",\n              \"other_ins\", \"medicare\", \"private_insurance\", \"fund\")],\n                 fb_data, all.y = TRUE, by = \"case_no\")\ninvisible(setkey(fb_data, NULL))\nfb_data <- fb_data[!is.na(case_no)]\n\n# sql - add admission to to funding bucket\nfb_data <- merge(fb_data, admit, all.x = TRUE, by = \"case_no\")\n\n## ideally, this should give us zero rows/ zero consumers\n# fb_data[is.na(medicare) & is.na(cmh_expdt) & !is.na(cmh_effdt)]\n\n# missing team to be labeled as Non-CMH\nfb_data[is.na(team), team := \"Non-CMH\"]\n## create Program ##\nsetkey(fb_data, team)\n# MI Adult\nfb_data[J(c(\"MI Adult\", \"ACT\")), program := \"MI Adult\"]\n# DD Adult\nfb_data[J(\"DD Adult\"), program := \"DD Adult\"]\n# Youth and Family\nfb_data[J(\"Child Services\"), program := \"Y&F\"]\n# Non-CMH\nfb_data[J(\"Non-CMH\"), program := \"Non-CMH\"]\n## months, quarters, and years columns ##\n# create fiscal year column\nfb_data[, fy := my_fy(from_date)]\n# create fiscal quarter column\nfb_data[, qtr := my_qtr(from_date)]\n# create month column\nfb_data[, month_date := as.yearmon(from_date)]\n## set fy/qtr to NA if date/cpt code are NA ##\nfb_data[is.na(cpt), fy := NA_character_]\nfb_data[is.na(cpt), qtr := NA_character_]\n\n### code descriptions ###\nUMcodeDesc[, c(\"State.Svc.Desc\", \"ABW.covered\") := NULL]\n# change names\nsetnames(UMcodeDesc, old = c(\"UM.Desc\", \"CPT.CD\"), new = c(\"UM_desc\", \"cpt\"))\n\n# merge services with um code desc\nfb_data <- merge(fb_data, UMcodeDesc, all.x = TRUE, by = c(\"cpt\"))\nrm(UMcodeDesc)\n\n# for blank UM description, replace with CPT code\nfb_data[is.na(UM_desc), UM_desc := \"missing UM Desc\"]\n\n### case load dataset ###\n# NA case numbers removed\ncase_load <- case_load[!is.na(case_no)]\n\n### locus ###\n# convert dates\ndate_cols = c(\"adm_date\", \"locus_date\")\nfor (j in date_cols)\n  set(locus, j = j, value = as.Date(locus[[j]], format = \"%m/%d/%y\"))\nrm(date_cols, j)\n# locus disposition level\nlocus[override == \"\", disp := recommend]\nlocus[override != \"\", disp := override]\n# find recent admissions (last 6 months)\nlocus[, days_cmh_open := dateConvert(end_date) - adm_date]\nlocus[between(days_cmh_open,-Inf, 182), open_status := \"0 to 6 months\"]\nlocus[between(days_cmh_open, 183, 364), open_status := \"6 to 12 months\"]\nlocus[, adm_diff := as.numeric(adm_date - locus_date)]\nlocus[, min_adm_diff := min(adm_diff), by = list(case_no)]\nlocus <- locus[min_adm_diff == adm_diff]\n# remove unwanted columns\nlocus[, c(\"adm_diff\", \"min_adm_diff\", \"recommend\",\n          \"override\", \"adm_date\") := NULL]\nlocus <- locus[!is.na(open_status)]\nlocus[, disp := word_to_num(disp)]\n# add TCM to locus consumers ... inner join\nTCM_by_con <- fb_data[team %in% c(\"ACT\", \"MI\") & cpt == \"T1017\",\n                      list(TCM = length(cpt)), by = case_no]\nlocus <- merge(locus, TCM_by_con, all.x = TRUE, by = \"case_no\")\nlocus[is.na(TCM), TCM := 0]\n### create prediction disposition ###\n# consumers open less than 6 months\nlocus[open_status == \"0 to 6 months\", pred_level := disp]\nlocus[open_status == \"6 to 12 months\",\n      pred_TCM := 365 * TCM / as.integer(days_cmh_open)]\nlocus[open_status == \"6 to 12 months\",\n      pred_TCM_level := levelTCM(pred_TCM)]\nlocus[open_status == \"6 to 12 months\",\n      pred_model := as.integer(days_cmh_open - 182) / 182 * pred_TCM_level +\n        (182 - as.integer(days_cmh_open - 182)) / 182 * disp]\nlocus[open_status == \"6 to 12 months\",\n      pred_round := pmin(round(pred_model), 3)]\nlocus[, replace_level := ifelse(!is.na(pred_round), pred_round, pred_level)]\nlocus[, setdiff(colnames(locus), c(\"case_no\", \"replace_level\")) := NULL]\n#### diagnoses ####\ndiagnoses <- unique(diagnoses)\n\n#### aggregate data ####\n# services by consumers\nservice_same_day <-\n  fb_data[!(unit_type %in% c(\"Day\", \"Encounter\")),\n          list(records = length(from_date)),\n          by = c(\"case_no\", \"UM_desc\")]\nservice_range_day <- fb_data[unit_type %in% c(\"Day\", \"Encounter\"),\n                             list(records = sum(units, na.rm = TRUE)),\n                             by = c(\"case_no\", \"UM_desc\")]\nservices <- rbindlist(list(service_same_day, service_range_day))\n## create error message if duplicates exist - dont worry about missing UM Desc ##\ndup_services <- services[, list(case_no, UM_desc)]\ndup_services <- services[duplicated(services), unique(UM_desc)]\nif (length(dup_services[dup_services != \"missing UM Desc\"]) > 0) {\n  print(data.frame(rep(\n    paste(\"stop...warning...\", dup_services), 10\n  )))\n  stop(\"services have duplicates - investigate!\")\n}\nservices <-\n  services[, list(records = sum(records, na.rm = TRUE)), by = list(case_no, UM_desc)]\nrm(service_same_day, service_range_day, dup_services)\n\n# change names\nsetnames(services, old = \"UM_desc\", new = \"cpt\")\n\n# cost by consumers\ncost <- fb_data[, list(cost = sum(cost, na.rm = FALSE)),\n                by = c(\"case_no\", \"program\", \"team\", \"cmh_effdt\", \"cmh_expdt\")]\n# number of TCM units per person\nTCMunits <-\n  fb_data[cpt == \"T1017\", list(TCMunits = sum(units)), by = \"case_no\"]\n\n# services reshaped from long to wide\nservices <-\n  reshape(services, idvar = \"case_no\", timevar = \"cpt\", direction = \"wide\")\nservices <- data.table(services)\n\n# removing 'records.' from column names\nsetnames(\n  services,\n  old = colnames(services)[grep(x = colnames(services), pattern =\n                                  \"records.\")],\n  new = gsub(\n    x = colnames(services)[grep(x = colnames(services), pattern = \"records.\")],\n    pattern = \"records.\", replacement = \"\"\n  )\n)\n# merge services and costs\nsetkey(services, case_no); setkey(cost, case_no)\nservices <- merge(services, cost, all.x = TRUE, by = \"case_no\")\n\n# merge services and TCM units\nsetkey(services, case_no); setkey(TCMunits, case_no)\nservices <- merge(services, TCMunits, all.x = TRUE, by = \"case_no\")\n\n# add case_load dataset via data.table merge (like SQL join)\nsetkey(services, case_no); setkey(case_load, case_no)\nservices <- merge(services, case_load, all.x = TRUE, by = \"case_no\")\n\n# add demo to services\nservices <- merge(services, demo, all.x = TRUE, by = \"case_no\")\n# add insurance layer\nservices <- merge(services, insure, all.x = TRUE, by = \"case_no\")\n# add diagnoses layer\nservices <- merge(services, diagnoses, all.x = TRUE, by = \"case_no\")\n\n## add court orders to services ##\ncourt[, case_no := as.numeric(case_no)]\nservices[, case_no := as.numeric(case_no)]\nservices <- merge(services, court, all.x = TRUE, by = \"case_no\")\nservices[is.na(ordertype), ordertype := \"No Court Order\"]\nservices[, cs_order_date := as.character(cs_order_date)]\n\n### prepare file for saving ###\n# change column order\nsetcolorder(services,\n            c(\n              c(\n                \"case_no\", \"age\", \"ordertype\", \"cs_order_date\", \"cmh_effdt\", \"cmh_expdt\",\n                \"fund\", \"medicare\", \"private_insurance\", \"primary_ins\", \"secondary_ins\",\n                \"other_ins\", \"diag1\", \"diag1_desc\", \"diag2\", \"diag2_desc\",\n                \"cost\", \"team\", \"program\", \"primary_staff\",\n                \"supervisor\", \"primary_staff_type\", \"primarycarephysician\", \"primarycareclinic\",\n                \"TCM\", \"TCMunits\"\n              ),\n              sort(setdiff(\n                colnames(services),\n                c(\n                  \"case_no\", \"age\", \"ordertype\", \"cs_order_date\", \"cmh_effdt\", \"cmh_expdt\",\n                  \"fund\", \"medicare\", \"private_insurance\", \"primary_ins\", \"secondary_ins\",\n                  \"other_ins\",  \"diag1\", \"diag1_desc\", \"diag2\", \"diag2_desc\",\n                  \"cost\", \"team\", \"program\", \"primary_staff\",\n                  \"supervisor\", \"primary_staff_type\", \"primarycarephysician\", \"primarycareclinic\", \"TCM\", \"TCMunits\"\n                )\n              ))\n            ))\n# establish Programs using teams\nsetkey(services, team)\n# Y&F\nservices[J(\"Child Services\"), program := \"Y&F\"]\n# MI Adult\nservices[J(c(\"MI Adult\", \"ACT\")), program := \"MI Adult\"]\n# DD Adult\nservices[J(\"DD Adult\"), program := \"DD Adult\"]\n# Non-CMH\nservices[J(\"Non-CMH\"), program := \"Non-CMH\"]\ninvisible(setkey(services, NULL))\n\n# consumers on ACT team should always have team as ACT\nservices[case_no %in% c(services[team == \"ACT\", unique(case_no)]), team := \"ACT\"]\nservices[case_no %in% c(services[team == \"ACT\", unique(case_no)]), program := \"MI Adult\"]\n# consumers on DD team should always have team as DD\nservices[case_no %in%\n  c(services[team == \"DD Adult\", unique(case_no)]), team := \"DD Adult\"]\nservices[case_no %in%\n  c(services[team == \"DD Adult\", unique(case_no)]), program := \"DD Adult\"]\n\n# remove duplicates\nservices[, cost :=\n  sum(cost, na.rm = FALSE), by = \"case_no\"] # add costs per person\nservices <- unique(services)\n\n# re-order by cost - highest to lowest\nservices <- services[order(-cost, program, team)]\nservices[!is.na(cmh_expdt), fund := \"non_CMH\"]\nservices[is.na(fund), fund := \"non_CMH\"]\nservices[team==\"Non-CMH\", fund := \"non_CMH\"]\n\n### does anyone have non-ACT team with ACT services? ###\n###    services[as.vector(!is.na(services[, \"ACT | H0039\", with=FALSE]))][team==\"MI\"]\n\n### MI Adult Services ###\nmi_services <- services[team == \"MI\" | team == \"ACT\"]\n## MI Adult --- Level 0 --- no contacts ##\nmi_services[is.na(TCM), level := \"L0_No_TCM\"]\n## MI Adult --- Level 1 –-- 1-2 TCM contacts ##\nmi_services[TCM %between% c(1, 2), level := \"L1\"]\n## MI Adult --- Level 2 –-- 3-12 TCM contacts ##\nmi_services[TCM %between% c(3, 12), level := \"L2\"]\n## MI Adult --- Level 3 –-- 12 and above TCM contacts ##\nmi_services[TCM %between% c(13, Inf), level := \"L3\"]\nmi_services <-\n  merge(mi_services, locus[, c(\"case_no\", \"replace_level\"), with = FALSE],\n        all.x = TRUE, by = \"case_no\")\nmi_services[replace_level == 1, level := \"L1\"]\nmi_services[replace_level == 2, level := \"L2\"]\nmi_services[replace_level >= 3, level := \"L3\"]\nmi_services[, replace_level := NULL]\n# level 4: ACT\nmi_services[team == \"ACT\", level := \"ACT\"]\n# level 5: Residential\nmi_services[supervisor == \"Hoener, Katie\" |\n              primary_staff == \"Hoener, Katie\", level := \"Residential\"]\nmi_services[, names(which(mapply(checkEmpty, mi_services) == \"empty\")) := NULL]\n### Y & F ###\nyf_services <- services[team %in% c(\"Child\", \"Child HB\")]\n\n#   # filter out either MI TCM or DD TCM (must be at least one of the two used)\n#   no_TCM_save <- copy(mi_services)\n#   if(length(grep(x=colnames(no_TCM_save), pattern=\"TCM_DD\", value=TRUE))>0) {\n#     setnames(no_TCM_save, \"TCM_DD\", \"TCM | DD\")\n#     no_TCM_save = no_TCM_save[is.na(TCM) & is.na(TCM_DD)]\n#   } else {\n#     no_TCM_save = no_TCM_save[is.na(TCM)]\n#   }\n#   ## remove empty columns from no_TCM_save\n#   no_TCM_save[, names(which(mapply(checkEmpty, no_TCM_save)==\"empty\")) := NULL]\n#   ## remove empty columns from mi_services\n#   mi_services[, names(which(mapply(checkEmpty, mi_services)==\"empty\")) := NULL]\n\n#### save results ####\n### create information about the file to share with end-users ###\naboutFile <- data.table(\n  Report_Date = run_date,\n  Last_Updated = as.character(Sys.time()),\n  Data_Sources = list.files(file.path(baseWD, dataWD), pattern = \"[.]\")\n)",
    "created" : 1444852697567.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "193224950",
    "id" : "1766CFBC",
    "lastKnownWriteTime" : 1444852677,
    "path" : "~/GitHub/CMH/UM/Fund/Code/1_base_service.R",
    "project_path" : "Code/1_base_service.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}