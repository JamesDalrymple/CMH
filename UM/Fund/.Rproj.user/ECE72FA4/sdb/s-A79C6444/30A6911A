{
    "collab_server" : "",
    "contents" : "\nhelp(`environment<-`)\n\n### fund only auxillary ###\npkg_loader(packages = c(\"data.table\", \"zoo\", \"xlsx\"))\n\n# UM code description\num_code_desc <- fread(file.path(\n  project_wd$dropbox,\n  \"Utilization Management/UM_Desc_MDCH_2012.csv\"\n))\n\nfile_list <- list(\n  csv_files = list.files(\n    file.path(project_wd$data),\n    pattern = \".csv\",\n    full.names = TRUE),\n  rds_files = list.files(\n    file.path(project_wd$data),\n    pattern = \".rds\",\n    full.names = TRUE)\n)\ndata.table(file_list)\n\n\n\n\n# convert locus scores to numbers\nword_to_num <- function(x) {\n  switch(x,\n         \"Level Zero\" = 1,\n         \"Level One\" = 1,\n         \"Level Two\" = 2,\n         \"Level Three\" = 3,\n         \"Level Four\" = 4,\n         \"Level Five\" = 5,\n         \"Level Six\" = 3, # per Kelly B. 5/7/2015\n         2)\n}\n# word_to_num <- Vectorize(word_to_num)\n\n# function to convert TCM to levels\nlevelTCM <- function(x) {\n  result <- cut(x, breaks = c(-Inf, 1, 3, 13, Inf),\n                labels = c(0, 1, 2, 3), right=FALSE)\n  result <- as.numeric(result)\n  return(result)\n}\n\n# # find the priority team for consumers\n# team.priority <- function(x) { y = switch(x,\n#                                          \"WSH - OBRA\" = 1,\n#                                          \"WSH - ACT\" = 2,\n#                                          \"WSH - DD Adult\" = 3,\n#                                          \"WSH - MI - Adult\" = 4,\n#                                          \"WSH - ATO\" = 4,\n#                                          \"WSH - Children\\'s Services - Home Based\" = 5,\n#                                          \"WSH - Children\\'s Services\" = 5,\n#                                          \"WSH - PATH/PORT\" = 6,\n#                                          \"Community Support and Treatment Services - CSTS\" = 7,\n#                                          \"WSH - Access/Engagement\" = 7,\n#                                          \"Non-CMH\" = 9,\n#                                          10)\n#                               return(as.numeric(y))\n# }\n\n# # change team name\n# teamFix <- function(x) {\n#   y <- switch(x,\n#              \"WSH - OBRA\" = \"Non-CMH\",\n#              \"WSH - Children\\'s Services - Home Based\" = \"Child HB\",\n#              \"WSH - Children\\'s Services\" = \"Child\",\n#              \"WSH - DD Adult\" = \"DD\",\n#              \"WSH - ACT\" = \"ACT\",\n#              \"WSH - MI - Adult\" = \"MI\",\n#              \"WSH - ATO\" = \"MI\",\n#              \"Community Support and Treatment Services - CSTS\" = \"Access/Engagement\",\n#              \"WSH - Access/Engagement\" = \"Access/Engagement\",\n#              \"Non-CMH\" = \"Non-CMH\",\n#              \"WSH - PATH/PORT\" = \"PATH/PORT\",\n#              \"WSH - ICSS team\" = \"Non-CMH\",\n#              x)\n# }\n# teamFix <- Vectorize(teamFix)\n\n# # change fund\n# fundFix <- function(x) {\n#   switch(x,\n#          \"Medicaid - State Plan\" = \"Medicaid\",\n#          \"Medicaid - b3\" = \"Medicaid\",\n#          \"Medicaid - Hab Sup Waiver\" = \"Medicaid\",\n#          \"General Fund\" = \"GF\",\n#          \"General Fund - Acute Services\" = \"GF\",\n#          \"Healthy Michigan Plan\" = \"HMP\",\n#          \"Adult Benefit Waiver\" = \"Adult Benefit Waiver\",\n#          \"Child Waiver\" = \"Child Waiver\",\n#          \"MIChild\" = \"MIChild\",\n#          \"Medicaid - Acute Services\" = \"Medicaid\",\n#          \"ABW-Acute Services\" = \"ABW\",\n#          \"HMP-Acute Services\" = \"HMP\",\n#          \"Medicaid - Partial Services\" = \"Medicaid\",\n#          \"General Fund - Partial Services\" = \"GF\",\n#          \"unknown fund\"\n#          )\n# }\n# fundFix <- Vectorize(fundFix)\n\n# narrow down team assignment to one per person per day\nteamCMH <- c(\"WSH - Access/Engagement\",\n            \"Community Support and Treatment Services - CSTS\",\n            \"WSH - ACT\",\n            \"WSH - ATO\",\n            \"WSH - Children's Services\",\n            \"WSH - Children's Services - Home Based\",\n            \"WSH - DD Adult\",\n            \"WSH - MI - Adult\")\n\n# # check if vector is empty\n# checkEmpty <- function(x) {\n#   if(class(x)==\"Date\") {\n#     x <- as.character(x)\n#   }\n#   result <- (unique(x)==\"\" | is.na(unique(x)) )\n#   result <- sum(result)/length(result)\n#   if(result<1) {result <- \"non-empty\"} else {result <- \"empty\"}\n#   return(result)\n# }\n\n# # fix a dt with empty columns via checkEmpty and mapply - retired 9/8/2015 per Kelly Bellus\n# export_dt <- function(x) {\n#   if (nrow(x)>0) {\n#     if (length(names(which(mapply(checkEmpty, x)==\"empty\")))>0) {\n#       x[, names(which(mapply(checkEmpty, x)==\"empty\")) := NULL]\n#     }\n#   }\n#   return(x)\n# }\n\n# # convert csv to rds\n# csv_to_rds <- function(csv_file, keep_cols, rename_cols=rename_cols, rm.original) {\n#   csv_data <- fread(csv_file)\n#   rds_file <- gsub(x=csv_file, pattern=\".csv\", replace=\".rds\")\n#\n#   if(length(csv_data[, intersect(colnames(csv_data), keep_cols)])!=length(keep_cols)) {\n#     stop(\"keep_cols are not in original file! Check original file!\")}\n#   suppressWarnings(csv_data[, setdiff(colnames(csv_data), keep_cols) := NULL])\n#   setnames(csv_data, colnames(csv_data), rename_cols)\n#   saveRDS(object=csv_data, file=rds_file)\n#   if(rm.original) {unlink(x=csv_file); print(\"original file deleted\")}\n#   result <- readRDS(file=rds_file)\n# }\n#\n# # load, save, compress data and delete original\n# load_data <- function(file_pattern, keep_cols, rename_cols=rename_cols, rm.original=FALSE) {\n#   data_csv <- grep(x=csv_files, pattern=file_pattern,\n#                    ignore.case=TRUE, value=TRUE, perl=TRUE)\n#   data_rds <- grep(x=rds_files, pattern=file_pattern,\n#                    ignore.case=TRUE, value=TRUE)\n#   if(length(data_csv)==0 && length(data_rds)==0 ) {stop(\"No file found with given pattern (csv or rds).\")}\n#   if(length(data_csv) > 1 ) {\n#     stop(paste(\"too many csv\", file_pattern, \"files!\", sep=\" - \"))\n#   }\n#   if(length(data_csv)==1) {\n#     # load data_csv, keep only wanted columns, save as rds file,\n#     # then load rds file, then delete data_csv file\n#     result <- csv_to_rds(csv_file=data_csv,\n#                keep_cols = keep_cols,\n#                rename_cols = rename_cols,\n#                rm.original = rm.original)\n#   }  else if(length(data_rds)==1) {\n#     # load rds file\n#     result <- readRDS(file=data_rds)\n#     if( length(colnames(result)) > length(rename_cols) ) {\n#       result[, setdiff(colnames(result), rename_cols) := NULL]\n#       saveRDS(object=result, file=data_rds)\n#     }\n#   }\n#   return(result)\n# }\n#\n# # helper function for making file name for export\n# fund_name <- function(x) {\n#   x <- paste(tolower(x), collapse=\"_\")\n#   x <- gsub(x=x, pattern=\"/\", replace=\"_\")\n#   x <- gsub(x=x, pattern=\"-\", replace=\"\")\n#   return(x)\n# }\n#\n# my_paste <- function(..., collapse=\"|\") {\n#   L <- c(...)\n#   L <- L[!is.na(L)]\n#   L <- paste(L, collapse=collapse)\n# return(unique(L))\n# }\n# my_paste(c(1, 2, NA))\n",
    "created" : 1444852659105.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2379357874",
    "id" : "30A6911A",
    "lastKnownWriteTime" : 1445280296,
    "path" : "~/GitHub/CMH/UM/Fund/Code/0_service auxillary.R",
    "project_path" : "Code/0_service auxillary.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}