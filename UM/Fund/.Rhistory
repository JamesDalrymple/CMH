fb_data[is.na(cpt), qtr := NA_character_]
### code descriptions ###
setnames(um_code_desc,
names(um_code_desc),
gsub(
x = names(um_code_desc),
pattern = "[.]",
replacement = " "
))
um_code_desc[, c("State Svc Desc") := NULL]
# change names
setnames(um_code_desc, old = c("UM Desc", "CPT CD"), new = c("UM_desc", "cpt"))
# merge services with um code desc
fb_data <- um_code_desc[fb_data, on="cpt"]
rm(um_code_desc)
# for blank UM description, replace with CPT code
fb_data[is.na(UM_desc), UM_desc := "missing UM Desc"]
### case load dataset ###
# NA case numbers removed
case_load <- case_load[!is.na(case_no)]
### locus ###
# convert dates
date_cols = c("adm_date", "locus_date")
for (j in date_cols)
set(locus, j = j, value = as.Date(locus[[j]]))
rm(date_cols, j)
# locus disposition level
locus[is.na(override), disp := recommend]
locus[!is.na(override), disp := override]
# find recent admissions (last 6 months)
locus[, days_cmh_open := date_convert(input$end_date) - adm_date]
locus[between(days_cmh_open,-Inf, 182), open_status := "0 to 6 months"]
locus[between(days_cmh_open, 183, 364), open_status := "6 to 12 months"]
locus[, adm_diff := as.numeric(adm_date - locus_date)]
locus[, min_adm_diff := min(adm_diff), by = list(case_no)]
locus <- locus[min_adm_diff == adm_diff]
# remove unwanted columns
locus[, c("adm_diff", "min_adm_diff", "recommend",
"override", "adm_date") := NULL]
locus <- locus[!is.na(open_status)]
locus[, disp := trim(disp)]
locus[, disp := sapply(disp, aux$word_to_num)]
# add TCM to locus consumers ... inner join
TCM_by_con <- fb_data[team %in% c("ACT", "MI") & cpt == "T1017",
list(TCM = length(cpt)), by = case_no]
locus <- merge(locus, TCM_by_con, all.x = TRUE, by = "case_no")
locus[is.na(TCM), TCM := 0]
### create prediction disposition ###
# consumers open less than 6 months
# locus[, pred_level := NA_integer_]
locus[open_status == "0 to 6 months", pred_level := disp]
locus[open_status == "6 to 12 months",
pred_TCM := 365 * TCM / as.integer(days_cmh_open)]
locus[open_status == "6 to 12 months",
pred_TCM_level := aux$levelTCM(pred_TCM)]
locus[open_status == "6 to 12 months",
pred_model := as.integer(days_cmh_open - 182) / 182 * pred_TCM_level +
(182 - as.integer(days_cmh_open - 182)) / 182 * disp]
locus[open_status == "6 to 12 months",
pred_round := pmin(round(pred_model), 3)]
locus[, replace_level := ifelse(!is.na(pred_round), pred_round, pred_level)]
locus[, setdiff(names(locus), c("case_no", "replace_level")) := NULL]
#### diagnoses ####
diagnoses <- unique(diagnoses)
#### aggregate data ####
# services by consumers
service_same_day <-
fb_data[!(unit_type %in% c("Day", "Encounter")),
list(records = length(from_date)),
by = c("case_no", "UM_desc")]
service_range_day <- fb_data[unit_type %in% c("Day", "Encounter"),
list(records = sum(units, na.rm = TRUE)),
by = c("case_no", "UM_desc")]
services <- rbindlist(list(service_same_day, service_range_day))
## create error message if duplicates exist - dont worry about missing UM Desc ##
dup_services <- services[, list(case_no, UM_desc)]
dup_services <- services[duplicated(services), unique(UM_desc)]
if (length(dup_services[dup_services != "missing UM Desc"]) > 0) {
print(data.frame(rep(
paste("stop...warning...", dup_services), 10
)))
stop("services have duplicates - investigate!")
}
services <-
services[, list(records = sum(records, na.rm = TRUE)), by = list(case_no, UM_desc)]
rm(service_same_day, service_range_day, dup_services)
# change names
setnames(services, old = "UM_desc", new = "cpt")
fb_data
fb_data[, list(cost = sum(cost, na.rm = FALSE)),
by = c("case_no", "program", "team", "cmh_effdt", "cmh_expdt")]
fb_data
fb_data[, list(cost = sum(cost, na.rm = FALSE)),
by = c("case_no", "program", "team", "cmh_effdt", "cmh_expdt", "fy")]
fb_data
fb_data[fy == "2016" & qtr == "2016 Q1",
list(cost = sum(cost, na.rm = FALSE)),
by = c("case_no", "program", "team", "cmh_effdt", "cmh_expdt")]
input <- list(
current_cost_qtr = "2016 Q1",
run_date = "3/7/2016",
end_date = "12/31/2015" # data parameter end
)
substr(input, 1, 4)
substr(input$current_cost_qtr, 1, 4)
fb_data[fy == substr(input$current_cost_qtr, 1, 4)  &
qtr == input$current_cost_qtr,
list(cost = sum(cost, na.rm = FALSE)),
by = c("case_no", "program", "team", "cmh_effdt", "cmh_expdt")]
input$current_cost_qtr
fb_data[fy == substr(input$current_cost_qtr, 1, 4)  &
qtr == input$current_cost_qtr,
list(input$current_cost_qtr = sum(cost, na.rm = FALSE)),
by = c("case_no", "program", "team", "cmh_effdt", "cmh_expdt")]
input$current_cost_qtr
as.name(input$current_cost_qtr)
fb_data[fy == substr(input$current_cost_qtr, 1, 4)  &
qtr == input$current_cost_qtr,
list(as.name(input$current_cost_qtr) = sum(cost, na.rm = FALSE)),
by = c("case_no", "program", "team", "cmh_effdt", "cmh_expdt")]
fb_data[fy == substr(input$current_cost_qtr, 1, 4)  &
qtr == input$current_cost_qtr,
list(as.name(input$current_cost_qtr) = sum(cost, na.rm = FALSE)),
by = c("case_no", "program", "team", "cmh_effdt", "cmh_expdt")]
fb_data[fy == substr(input$current_cost_qtr, 1, 4)  &
qtr == input$current_cost_qtr,
list(as.name(input$current_cost_qtr) = sum(cost, na.rm = FALSE)),
fb_data[fy == substr(input$current_cost_qtr, 1, 4)  &
qtr == input$current_cost_qtr,
list(cur_qtr = sum(cost, na.rm = FALSE)),
by = c("case_no", "program", "team", "cmh_effdt", "cmh_expdt")]
modify$cur_qtr_cost <-
fb_data[fy == substr(input$current_cost_qtr, 1, 4)  &
qtr == input$current_cost_qtr,
list(cur_qtr = sum(cost, na.rm = FALSE)),
by = c("case_no", "program", "team", "cmh_effdt", "cmh_expdt")]
input$current_cost_qtr
setnames(modify$cur_qtr_cost, "cur_qtr", input$current_cost_qtr)
modify$cur_qtr_cost
cost
cost <- fb_data[, list(cost = sum(cost, na.rm = FALSE)),
by = c("case_no", "program", "team", "cmh_effdt", "cmh_expdt")]
cost
merge(cost, modify$cur_qtr_cost, all.x = TRUE, by = Cs(case_no, program, team, cmh_effdt, cmh_expdt))
cost <- merge(cost, modify$cur_qtr_cost, all.x = TRUE,
by = Cs(case_no, program, team, cmh_effdt, cmh_expdt))
# number of TCM units per person
TCMunits <-
fb_data[cpt == "T1017", list(TCMunits = sum(units)), by = "case_no"]
# services reshaped from long to wide
services <-
reshape(services, idvar = "case_no", timevar = "cpt", direction = "wide")
services <- data.table(services)
# removing 'records.' from column names
setnames(
services,
old = names(services)[grep(x = names(services), pattern =
"records.")],
new = gsub(
x = names(services)[grep(x = names(services), pattern = "records.")],
pattern = "records.", replacement = ""
)
# merge services and costs
setkey(services, case_no); setkey(cost, case_no)
services <- merge(services, cost, all.x = TRUE, by = "case_no")
# merge services and TCM units
setkey(services, case_no); setkey(TCMunits, case_no)
services <- merge(services, TCMunits, all.x = TRUE, by = "case_no")
# add case_load dataset via data.table merge (like SQL join)
setkey(services, case_no); setkey(case_load, case_no)
services <- merge(services, case_load, all.x = TRUE, by = "case_no")
# add demo to services
services <- merge(services, demo, all.x = TRUE, by = "case_no")
# add insurance layer
services <- merge(services, insure, all.x = TRUE, by = "case_no")
# add diagnoses layer
services <- merge(services, diagnoses, all.x = TRUE, by = "case_no")
## add court orders to services ##
court[, case_no := as.numeric(case_no)]
services[, case_no := as.numeric(case_no)]
services <- merge(services, court, all.x = TRUE, by = "case_no")
services[is.na(ordertype), ordertype := "No Court Order"]
services[, cs_order_date := as.character(cs_order_date)]
### prepare file for saving ###
# change column order
input$current_cost_qtr
## to do:: remove state hospital consumers from all spreadsheets
# initializing working directory and input parameters -------------------------
rm(list = ls()) # clear RAM
# which computer results in correct base working directory
cmh_wd <-
data.table::data.table(expand.grid(stringsAsFactors = FALSE,
dir_names = c("Dropbox", "GitHub"),
comp_names = c("WSHSQLGP", "DESKTOP-45K7RRN", "JAMES-2"),
base = "filler"))
data.table::setkey(cmh_wd, dir_names, comp_names)[
J("Dropbox", "WSHSQLGP"), base := "C:/Users/dalrymplej/Dropbox"]
data.table::setkey(cmh_wd, dir_names, comp_names)[
J("GitHub", "WSHSQLGP"), base := "C:/Users/dalrymplej/Documents/GitHub"]
project_wd <- list()
project_wd$github <- cmh_wd[J("GitHub", "WSHSQLGP"), base]
project_wd$dropbox <- cmh_wd[J("Dropbox", "WSHSQLGP"), base]
project_wd$project <- "CMH/UM/Fund"
project_wd$code <- file.path(project_wd$github, project_wd$project, "Code")
project_wd$data <- file.path(project_wd$dropbox,
"Utilization Management/Fund Only/Data")
project_wd$results <- "Utilization Management/Fund Only/Results"
rm(cmh_wd)
# user input ------------------------------------------------------------------
input <- list(
current_cost_qtr = "2016 Q1",
run_date = "3/7/2016",
end_date = "12/31/2015" # data parameter end
)
# for folder
project_wd$data <- file.path(project_wd$data,
gsub(
x = input$run_date,
pattern = "/",
replace = "_"
))
# load packages, source files -------------------------------------------------
library(wccmh)
# source(file.path(project_wd$dropbox, "WCCMH/R/global library.R"))
source(file.path(project_wd$code, "0_service auxillary.R"))
source(file.path(project_wd$code, "1_fund_sql.R"))
source(file.path(project_wd$code, "/partial_fy_costs/2_base_service.R"))
source(file.path(project_wd$code, "/partial_fy_costs/3_export_xlxs.R"))
## to do:: remove state hospital consumers from all spreadsheets
# initializing working directory and input parameters -------------------------
rm(list = ls()) # clear RAM
# which computer results in correct base working directory
cmh_wd <-
data.table::data.table(expand.grid(stringsAsFactors = FALSE,
dir_names = c("Dropbox", "GitHub"),
comp_names = c("WSHSQLGP", "DESKTOP-45K7RRN", "JAMES-2"),
base = "filler"))
data.table::setkey(cmh_wd, dir_names, comp_names)[
J("Dropbox", "WSHSQLGP"), base := "C:/Users/dalrymplej/Dropbox"]
data.table::setkey(cmh_wd, dir_names, comp_names)[
J("GitHub", "WSHSQLGP"), base := "C:/Users/dalrymplej/Documents/GitHub"]
project_wd <- list()
project_wd$github <- cmh_wd[J("GitHub", "WSHSQLGP"), base]
project_wd$dropbox <- cmh_wd[J("Dropbox", "WSHSQLGP"), base]
project_wd$project <- "CMH/UM/Fund"
project_wd$code <- file.path(project_wd$github, project_wd$project, "Code")
project_wd$data <- file.path(project_wd$dropbox,
"Utilization Management/Fund Only/Data")
project_wd$results <- "Utilization Management/Fund Only/Results"
rm(cmh_wd)
# user input ------------------------------------------------------------------
input <- list(
run_date = "3/7/2016",
end_date = "12/31/2015" # data parameter end
)
# for folder
project_wd$data <- file.path(project_wd$data,
gsub(
x = input$run_date,
pattern = "/",
replace = "_"
))
# load packages, source files -------------------------------------------------
library(wccmh)
# source(file.path(project_wd$dropbox, "WCCMH/R/global library.R"))
source(file.path(project_wd$code, "0_service auxillary.R"))
source(file.path(project_wd$code, "1_fund_sql.R"))
source(file.path(project_wd$code, "2_base_service.R"))
project_wd
fread(file.path(project_wd$github, project_wd$project))
file.path(project_wd$github, project_wd$project)
fread(file.path(project_wd$github, project_wd$project, "KB_5_2_16.csv"))
file.path(project_wd$github, project_wd$project, "KB_5_2_16.csv")
fread(file.path(project_wd$github, project_wd$project, "Data/KB_5_2_16.csv"))
file_filter <- fread(file.path(project_wd$github,
project_wd$project, "Data/KB_5_2_16.csv"))
file_filter <- fread(file.path(project_wd$github,
project_wd$project, "Data/KB_5_2_16.csv"))
file_filter
all_funds
modify
yf_services
mi_services
services
file_filter
merge(file_filter, services, by = c("case_no"))
yf_services <- merge(file_filter, yf_services, by = c("case_no"))
yf_services
mi_services <- merge(file_filter, mi_services, by = c("case_no"))
mi_services
sql$fb_full_list <- list.files(path = "G:/CSTS Data Analyst Archives/FB_archives/rds",
full.names = TRUE)
sql$fb_full_list
input$run_par
## to do:: remove state hospital consumers from all spreadsheets
# initializing working directory and input parameters -------------------------
rm(list = ls()) # clear RAM
# which computer results in correct base working directory
cmh_wd <-
data.table::data.table(expand.grid(stringsAsFactors = FALSE,
dir_names = c("Dropbox", "GitHub"),
comp_names = c("WSHSQLGP", "DESKTOP-45K7RRN", "JAMES-2"),
base = "filler"))
data.table::setkey(cmh_wd, dir_names, comp_names)[
J("Dropbox", "WSHSQLGP"), base := "C:/Users/dalrymplej/Dropbox"]
data.table::setkey(cmh_wd, dir_names, comp_names)[
J("GitHub", "WSHSQLGP"), base := "C:/Users/dalrymplej/Documents/GitHub"]
project_wd <- list()
project_wd$github <- cmh_wd[J("GitHub", "WSHSQLGP"), base]
project_wd$dropbox <- cmh_wd[J("Dropbox", "WSHSQLGP"), base]
project_wd$project <- "CMH/UM/Fund"
project_wd$code <- file.path(project_wd$github, project_wd$project, "Code")
project_wd$data <- file.path(project_wd$dropbox,
"Utilization Management/Fund Only/Data")
project_wd$results <- "Utilization Management/Fund Only/Results"
rm(cmh_wd)
# user input ------------------------------------------------------------------
input <- list(
run_date = "5/2/2016",
end_date = "2/29/2016" # data parameter end
)
# for folder
project_wd$data <- file.path(project_wd$data,
gsub(
x = input$run_date,
pattern = "/",
replace = "_"
))
# load packages, source files -------------------------------------------------
library(wccmh)
# source(file.path(project_wd$dropbox, "WCCMH/R/global library.R"))
source(file.path(project_wd$code, "0_service auxillary.R"))
# funding bucket -- must download manually -- ranged point in  time data
sql <- new.env(parent=.GlobalEnv)
sql$channel <- odbcConnect("WSHSQLGP")
# current state hospital consumers
sql$query$state_hosp <-
sprintf("select distinct case_no
from encompass.dbo.tblE2_hosp
where county = 'Washtenaw' and contract_paneltype = 'State Facility' and
(auth_exp >= '%s' or auth_exp is null)",
date_convert(input$end_date))
# data.table(sqlQuery(channel=sql$channel, query=sql$query$state_hosp))
# insure -- CMH Open Ins 2046 sheet1 -- point in  time data
sql$query$insure <- "select distinct
CMH.case_no, CMH.age, CMH.medicaid_related, INS2.waiver, INS2.primary_ins,
INS2.secondary_ins, INS2.other_ins,
max(case when  INS.IC_name = 'MEDICARE' and
(INS.IP_MEDA = 'Y' and INS.IP_MEDB = 'N')
then 'Y' else null end) as medicare_A,
max(case when INS.IC_name = 'MEDICARE' and
(INS.IP_MEDA = 'N' and INS.IP_MEDB = 'Y')
then 'Y' else null end) as medicare_B,
max(case when INS.IC_name = 'MEDICARE' and
(INS.IP_MEDA = 'Y' and INS.IP_MEDB = 'Y')
then 'Y' else null end) as medicare_A_B,
max(case when INS.IC_name = 'MEDICARE PART D'
then 'Y' else null end) as medicare_D
from encompass.dbo.tblE2_CMH_Open_Consumers_w_OBRA as CMH
left join encompass.dbo.tblE2_IPOS as IPOS on
CMH.County = IPOS.County and CMH.Case_No = IPOS.Case_No
and getdate() between IP_effdt and IP_expdt
left join encompass.dbo.PCCClientDemographics as demo
on CMH.CLF_CDEID  = Demo.CD_RCDID
left join encompass.dbo.PCFCode as ParentalStatus
on Demo.CDF_QIPSTS = ParentalStatus.CO_RCDID
left join encompass.dbo.tblE2_Consumer_Ins_Current INS
on INS.case_No = CMH.case_no
and INS.IC_name in ( 'MEDICARE PART D', 'MEDICARE')
left join encompass.dbo.tblE2_Consumer_Ins_Current2 INS2
on INS2.case_No = CMH.case_no
left join encompass.dbo.PARInsurancePolicyMedicarePartD as MedicarePartD
on MedicarePartD.IP_RCDID = INS.IP_RCDID and INS.IC_name = 'MEDICARE PART D'
left join encompass.dbo.PCFCode PrescriptionPlan on
PrescriptionPlan.CO_RCDID = MedicarePartD.IPF_PPLAN
where CMH.County = 'Washtenaw'
group by CMH.case_no, CMH.age, CMH.Medicaid_Related, INS2.Waiver,
INS2.primary_ins, INS2.secondary_ins, INS2.other_ins"
# ins_detail -- CMH Open Ins 2046 sheet2 -- point in time data
sql$query$pvt_insure <- "select distinct
CMH.case_no, INS.IC_name as insurance_name
from encompass.dbo.tblE2_CMH_Open_Consumers_w_OBRA CMH
join encompass.dbo.tblE2_Consumer_Ins_Current INS on
INS.county = CMH.county and INS.case_No = CMH.case_no
and INS.IC_name not in ('MEDICARE', 'Child Waiver', 'HAB Waiver',
'SED Waiver', 'MEDICARE PART D',
'Medicaid Deductible',  'Financial Determination', 'SDA,SSI,SSDI',
'Adoption Subsidy',	'Assessed for Medicaid Expansion - Eligible',
'Assessed for Medicaid Expansion - Not Eligible',	'SOBRIETY COURT',
'Autism', 'MENTAL HEALTH COURT')
where CMH.County = 'Washtenaw'
group by CMH.case_no, INS.IC_name"
# case_load -- duplicate rows/consumer dealt with shortly, point in time data
sql$query$case_load <- "select distinct
AC.case_no, CMH.primary_staff, AC.staff_type as primary_staff_type,
AC.supervisor
from encompass.dbo.tblE2_Open_Consumers as AC
join encompass.dbo.E2_Fn_Active_Clients_Between2
('Washtenaw', GETDATE(), GETDATE()) as CMH on
AC.county = CMH.county and AC.case_no = CMH.case_no
where AC.County = 'Washtenaw' and CMH.primary_staff = AC.assigned_staff"
# admit, E2 2181 sheet1
sql$query$admit <- sprintf("select distinct
case_no, team, team_effdt, team_expdt, cmh_effdt, cmh_expdt,
primary_provide_or_not
from encompass.dbo.tblE2_CMH_Adm_Consumers_w_OBRA
where county = 'Washtenaw' and CMH_effdt<= '%2$s'
and (CMH_expdt is null or CMH_expdt >= '%1$s')",
date_convert(input$start_date),
date_convert(input$end_date))
# sqlQuery(channel = sql$channel, sql$q_court)
# court -- 2061 sheet1, court order repetition & PRR -- point in time data
sql$query$court <- "select distinct
case_no, ordertype, cs_order_date
from encompass.dbo.E2_Fn_Court_Orders ('Washtenaw')
where prr_Date > = GETDATE()"
# demo -- CMH demo 2105 -- point in time data
sql$query$demo <- "select distinct
CMH.case_no,
COALESCE( ltrim(rtrim(PrimaryCarePhysician.PC_LNAME)) +',
'+ ltrim(rtrim(PrimaryCarePhysician.PC_FNAME)) ,
ltrim(rtrim(PrimaryCarePhysician.PC_LNAME))) as PrimaryCarePhysician,
PrimaryCareClinic.PC_CNAME  as PrimaryCareClinic
from encompass.dbo.tblE2_CMH_Open_Consumers CMH
join encompass.dbo.PCCClient C on C.CL_RCDID = CMH.ClientID
left join encompass.dbo.PCCClientDemographics CD on CD.CD_RCDID = C.CLF_CDEID
left join encompass.dbo.PCCPrimaryCareClinic PrimaryCareClinic on
C.CLF_PCCID = PrimaryCareClinic.PC_RCDID and
PrimaryCareClinic.PC_OKTOUSE ='Y'
left join encompass.dbo.PCCPrimaryCarePhysician PrimaryCarePhysician on
C.CLF_PCPID = PrimaryCarePhysician.PC_RCDID and
PrimaryCarePhysician.PC_OKTOUSE  ='Y'
where CMH.County = 'Washtenaw'"
# diagnoses -- diagnoses 2157 -- point in time data
sql$query$diagnoses <- "select distinct
CMH.case_no, CMH.diag1, CMH.diag1_desc, CMH.diag2, CMH.diag2_desc
from encompass.dbo.E2_Fn_CMH_Consumers_Diagnoses3
('Washtenaw', getdate(), getdate()) as CMH
where CMH.team not in ('WSH - PATH/PORT', 'WSH - Sobriety Court',
'Crisis Residential Services', 'WSH - OBRA', 'WSH - MH Court')"
# locus -- locus 2227 -- ranged point in time data
sql$query$locus <- sprintf(
"select distinct
doc.case_no, Doc.DO_date as locus_date,
RecommendedDisposition.CO_NAME as recommended_disposition,
overiddenDisposition.CO_NAME as overidden_disposition,
AC.CMH_effdt as cmh_adm_date
from encompass.dbo.LCSAssessmentHeader as locus
join encompass.dbo.tblE2_Document as doc on locus.AH_RCDID  = doc.DO_RCDID
left join encompass.dbo.E2_Fn_Active_Clients_Between
('Washtenaw', '%1$s', '%2$s') as AC on
DOC.county = AC.county and AC.Case_no = DOC.Case_no
left join encompass.dbo.PCFCode as RecommendedDisposition on
Locus.AHF_RDISP	= RecommendedDisposition.CO_RCDID
left join encompass.dbo.PCFCode as OveriddenDisposition
on Locus.AHF_ODISP	= OveriddenDisposition.CO_RCDID
where doc.do_date between '%1$s' and '%2$s'
and Doc.County = 'Washtenaw'",
date_convert(input$start_date),
date_convert(input$end_date)
)
list.files(path = "G:/CSTS Data Analyst Archives/FB_archives/rds",
full.names = TRUE)
sql$fb_full_list <- list.files(path = "G:/CSTS Data Analyst Archives/FB_archives/rds",
full.names = TRUE)
grep(x = sql$fb_full_list,
pattern = paste(
format(date_convert(input$end_date) - 365, "%m_%d_%y"),
format(date_convert(input$end_date), "%m_%d_%y"),
sep = "_to_"
), value=TRUE)
grep(x = sql$fb_read,
pattern = format(as.Date(input$run_par, format = "%m_%d_%Y"), "%m_%d_%y"),
value = TRUE)
format(date_convert(input$end_date) - 365, "%m_%d_%y")
format(date_convert(input$end_date), "%m_%d_%y")
paste(
# format(date_convert(input$end_date) - 365, "%m_%d_%y"),
format(date_convert(input$end_date), "%m_%d_%y"),
sep = "_to_"
)
grep(x = sql$fb_full_list,
pattern = paste(
# format(date_convert(input$end_date) - 365, "%m_%d_%y"),
format(date_convert(input$end_date), "%m_%d_%y"),
sep = "_to_"
), value = TRUE)
full.names = TRUE)
sql$fb_read <- grep(x = sql$fb_full_list,
pattern = paste(
# format(date_convert(input$end_date) - 365, "%m_%d_%y"),
format(date_convert(input$end_date), "%m_%d_%y"),
sep = "_to_"
), value = TRUE)
sql$fb_read <-
grep(x = sql$fb_read,
pattern = format(as.Date(input$run_par, format = "%m_%d_%Y"), "%m_%d_%y"),
value = TRUE)
sql$fb_read
if (length(sql$fb_read) != 2) p_stop("you are not reading in 2 funding bucket
files, please look at sql$fb_read", sql$fb_read)
fb_data <-
Reduce(
f = function(...)
rbindlist(list(...), use.names = TRUE),
x = lapply(sql$fb_read, readRDS)
)
fb_data
source('~/GitHub/CMH/UM/Fund/Code/5_master_fund.R')
file.path(project_wd$code, "4_export_xlsx.R")
source(file.path(project_wd$code, "4_export_xlsx.R"))
source(file.path(project_wd$code, "4_export_xlxs.R"))
